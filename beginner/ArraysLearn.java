package beginner;

import java.util.Arrays;

public class ArraysLearn {
    public static void main(String[] args) {
        /*
        Массив представляет набор однотипных значений.
        Объявление массива похоже на объявление обычной переменной,
        которая хранит одиночное значение,
        причем есть два способа объявления массива:

        тип_данных название_массива[];
        // либо
        тип_данных[] название_массива;

        Например, определим массив чисел:

        int nums[];
        int[] nums2;

        После объявления массива мы можем инициализовать его:

        int nums[];
        nums = new int[4];  // массив из 4 чисел

        Создание массива производится с помощью следующей конструкции:
        new тип_данных[количество_элементов],
        где new - ключевое слово, выделяющее память для указанного в скобках
        количества элементов.

        Например, nums = new int[4]; - в этом выражении создается массив
        из четырех элементов int, и каждый элемент будет иметь значение
        по умолчанию - число 0.

        Также можно сразу при объявлении массива инициализировать его:

        int nums[] = new int[4];    // массив из 4 чисел
        int[] nums2 = new int[5];   // массив из 5 чисел

        При подобной инициализации все элементы массива имеют значение по
        умолчанию. Для числовых типов (в том числе для типа char) это число 0,
        для типа boolean это значение false,
        а для остальных объектов это значение null.
        Например, для типа int значением по умолчанию является число 0,
        поэтому выше определенный массив nums будет состоять из четырех нулей.

        Однако также можно задать конкретные значения для элементов массива
        при его создании:

        // эти два способа равноценны
        int[] nums = new int[] { 1, 2, 3, 5 };
        int[] nums2 = { 1, 2, 3, 5 };

        Стоит отметить, что в этом случае в квадратных скобках
        не указывается размер массива,
        так как он вычисляется по количеству элементов в фигурных скобках.

        После создания массива мы можем обратиться к любому его элементу по
        индексу,
        который передается в квадратных скобках после названия
        переменной массива:

        int[] nums = new int[4];

        // устанавливаем значения элементов массива
        nums[0] = 1;
        nums[1] = 2;
        nums[2] = 4;
        nums[3] = 100;

        // получаем значение третьего элемента массива
        System.out.println(nums[2]);    // 4

        Длина массива

        Важнейшее свойство, которым обладают массивы, является свойство length,
        возвращающее длину массива, то есть количество его элементов:


        Многомерные массивы

        Ранее мы рассматривали одномерные массивы, которые можно представить
        как цепочку или строку однотипных значений.
        Но кроме одномерных массивов также бывают и многомерными.
        Наиболее известный многомерный массив - таблица,
        представляющая двухмерный массив:


        int[] nums1 = new int[] { 0, 1, 2, 3, 4, 5 };

        int[][] nums2 = { { 0, 1, 2 }, { 3, 4, 5 } };

        Зубчатый массив

        Многомерные массивы могут быть также представлены как "зубчатые массивы"
        В вышеприведенном примере двухмерный массив имел 2 строчки и три столбца
        поэтому у нас получалась ровная таблица.
        Но мы можем каждому элементу в двухмерном массиве присвоить отдельный
        массив с различным количеством элементов:

        int[][] nums = new int[3][];
        nums[0] = new int[2];
        nums[1] = new int[3];
        nums[2] = new int[5];
         */

        int[] nums1 = {
                1,
                2,
                3,
                4,
                5,
        };

        System.out.println(Arrays.toString(nums1));

        int[][] numsMatrix = {
                {1, 2, 3, 4, 5},
                {6, 7, 8, 9, 10},
                {11, 12, 13, 14}
        };

        System.out.println(Arrays.deepToString(numsMatrix));

        int[][][] nums3 = {
                {{1,2}, {3,4},},
                {{5,6}, {7,8}},
        };

        System.out.println(Arrays.deepToString(nums3));
    }
}

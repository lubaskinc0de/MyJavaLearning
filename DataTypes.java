public class DataTypes {
    public static void main(String[] args) {
        /*
        Типы данных:

        boolean: хранит значение true или false

        boolean isActive = false;
        boolean isAlive = true;

        byte: хранит целое число от -128 до 127 и занимает 1 байт

        byte a = 3;
        byte b = 8;

        short: хранит целое число от -32768 до 32767 и занимает 2 байта

        short a = 3;
        short b = 8;

        int: хранит целое число от -2147483648 до 2147483647 и занимает 4 байта

        int a = 4;
        int b = 9;

        long: хранит целое число от –9 223 372 036 854 775 808 до
        9 223 372 036 854 775 807 и занимает 8 байт

        long a = 5;
        long b = 10;

        double: хранит число с плавающей точкой от ±4.9*10-324
        до ±1.7976931348623157*10308 и занимает 8 байт

        double x = 8.5;
        double y = 2.7;

        В качестве разделителя целой и дробной части в дробных литералах
        используется точка.

        float: хранит число с плавающей точкой от -3.4*1038 до 3.4*1038 и
        занимает 4 байта

        float x = 8.5F;
        float y = 2.7F;

        char: хранит одиночный символ в кодировке UTF-16 и занимает 2 байта,
        поэтому диапазон хранимых значений от 0 до 65535

        Все целочисленные литералы, например, числа 10, 4, -5, воспринимаются
        как значения типа int, однако мы можем присваивать целочисленные
        литералы другим целочисленным типам: byte, long, short.
        В этом случае Java автоматически осуществляет
        соответствующие преобразования.

        byte a = 1;
        short b = 2;
        long c = 2121;

        Однако если мы захотим присвоить переменной типа long очень большое
        число, которое выходит за пределы допустимых значений для типа int,
        то мы столкнемся с ошибкой во время компиляции:

        long num = 2147483649;
        Здесь число 2147483649 является допустимым для типа long,
        но выходит за предельные значения для типа int.
        И так как все целочисленные значения по умолчанию расцениваются
        как значения типа int, то компилятор укажет нам на ошибку.
        Чтобы решить проблему, надо добавить к числу суффикс l или L,
        который указывает, что число представляет тип long:

        long num = 2147483649L;

        Числа с плавающей точкой

        При присвоении переменной типа float дробного литерала с плавающей
        точкой, например, 3.1, 4.5 и т.д.,
        Java автоматически рассматривает этот литерал как значение типа double.
        И чтобы указать, что данное значение должно рассматриваться как float,
        нам надо использовать суффикс f:

        float fl = 30.6f;
        double db = 30.6;

        Символы и строки

        В качестве значения переменная символьного типа получает одиночный
        символ, заключенный в одинарные кавычки: char ch='e';.
        Кроме того, переменной символьного типа также можно присвоить
        целочисленное значение от 0 до 65535.
        В этом случае переменная опять же будет хранить символ,
        а целочисленное значение будет указывать на номер символа в таблице
        символов Unicode (UTF-16). Например:

        char ch=102; // символ 'f'
        System.out.println(ch);

        Символьные переменные не стоит путать со строковыми,
        'a' не идентично "a".

        Строковые переменные представляют объект String,
        который в отличие от char или int не является примитивным типом в Java:

        String hello = "Hello...";
        System.out.println(hello);
         */

        byte x = 5;
        short y = 123;
        int i = 32000;
        long l = 1111111111111000000L;
        double d = 14.5;
        float f = 14.5f;
        char c = 'a';
        String s = "Hello data types!";

        System.out.println(s);
        System.out.println(x);
        System.out.println(y);
        System.out.println(i);
        System.out.println(l);
        System.out.println(d);
        System.out.println(f);
        System.out.println(c);
    }
}
